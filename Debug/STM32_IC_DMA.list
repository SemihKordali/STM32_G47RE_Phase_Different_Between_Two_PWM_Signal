
STM32_IC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004220  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004408  08004408  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004408  08004408  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004408  08004408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  2000000c  0800441c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800441c  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5a8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1c  00000000  00000000  0002c5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  0002eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249f9  00000000  00000000  0002f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cac4  00000000  00000000  00054371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1415  00000000  00000000  00060e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015224a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e4  00000000  00000000  0015229c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080043e0 	.word	0x080043e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080043e0 	.word	0x080043e0

08000218 <HAL_TIM_IC_CaptureCallback>:
uint32_t Data2[numVal];
uint32_t PSData[numVal];
uint32_t FrData[numVal-1];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	//there is nothing for now
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr

0800022c <Phase_Shift_Calculator>:

void Phase_Shift_Calculator(void)
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
	int i;
	int sum;
	int TimeDifference;
	for (i=0 ; i < numVal ; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e02e      	b.n	8000296 <Phase_Shift_Calculator+0x6a>
	{
		if (Data1[i] < Data2[i])
 8000238:	4a2b      	ldr	r2, [pc, #172]	; (80002e8 <Phase_Shift_Calculator+0xbc>)
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	492a      	ldr	r1, [pc, #168]	; (80002ec <Phase_Shift_Calculator+0xc0>)
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d20d      	bcs.n	8000268 <Phase_Shift_Calculator+0x3c>
		{
			PSData[i] = Data2[i] - Data1[i];
 800024c:	4a27      	ldr	r2, [pc, #156]	; (80002ec <Phase_Shift_Calculator+0xc0>)
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4924      	ldr	r1, [pc, #144]	; (80002e8 <Phase_Shift_Calculator+0xbc>)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	1ad2      	subs	r2, r2, r3
 800025e:	4924      	ldr	r1, [pc, #144]	; (80002f0 <Phase_Shift_Calculator+0xc4>)
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000266:	e00c      	b.n	8000282 <Phase_Shift_Calculator+0x56>
		}
		else
		{
			PSData[i] = Data1[i] - Data2[i];
 8000268:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <Phase_Shift_Calculator+0xbc>)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	491e      	ldr	r1, [pc, #120]	; (80002ec <Phase_Shift_Calculator+0xc0>)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000278:	1ad2      	subs	r2, r2, r3
 800027a:	491d      	ldr	r1, [pc, #116]	; (80002f0 <Phase_Shift_Calculator+0xc4>)
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		sum += PSData[i];
 8000282:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <Phase_Shift_Calculator+0xc4>)
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	4413      	add	r3, r2
 800028e:	60bb      	str	r3, [r7, #8]
	for (i=0 ; i < numVal ; i++)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3301      	adds	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2b63      	cmp	r3, #99	; 0x63
 800029a:	ddcd      	ble.n	8000238 <Phase_Shift_Calculator+0xc>
	}
	TimeDifference = sum/numVal;
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	4a15      	ldr	r2, [pc, #84]	; (80002f4 <Phase_Shift_Calculator+0xc8>)
 80002a0:	fb82 1203 	smull	r1, r2, r2, r3
 80002a4:	1152      	asrs	r2, r2, #5
 80002a6:	17db      	asrs	r3, r3, #31
 80002a8:	1ad3      	subs	r3, r2, r3
 80002aa:	607b      	str	r3, [r7, #4]
	Phaseshift = 360*(TimeDifference / (float)TIM2CLOCK )* InpFrequency ;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	ee07 3a90 	vmov	s15, r3
 80002b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002b6:	eddf 6a10 	vldr	s13, [pc, #64]	; 80002f8 <Phase_Shift_Calculator+0xcc>
 80002ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002be:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80002fc <Phase_Shift_Calculator+0xd0>
 80002c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <Phase_Shift_Calculator+0xd4>)
 80002c8:	edd3 7a00 	vldr	s15, [r3]
 80002cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <Phase_Shift_Calculator+0xd8>)
 80002d2:	edc3 7a00 	vstr	s15, [r3]
	sum = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000188 	.word	0x20000188
 80002ec:	20000318 	.word	0x20000318
 80002f0:	200004a8 	.word	0x200004a8
 80002f4:	51eb851f 	.word	0x51eb851f
 80002f8:	4caba950 	.word	0x4caba950
 80002fc:	43b40000 	.word	0x43b40000
 8000300:	20000180 	.word	0x20000180
 8000304:	20000184 	.word	0x20000184

08000308 <Frequency_Calculator>:
void Frequency_Calculator(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
	int i ;
	int sum ;
	int TimeDifference;
	for (i=0; i < numVal-1; i++)
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	e017      	b.n	8000344 <Frequency_Calculator+0x3c>
	{
		FrData[i] = Data2[i+1] - Data2[i];
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3301      	adds	r3, #1
 8000318:	4a1a      	ldr	r2, [pc, #104]	; (8000384 <Frequency_Calculator+0x7c>)
 800031a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800031e:	4919      	ldr	r1, [pc, #100]	; (8000384 <Frequency_Calculator+0x7c>)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000326:	1ad2      	subs	r2, r2, r3
 8000328:	4917      	ldr	r1, [pc, #92]	; (8000388 <Frequency_Calculator+0x80>)
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sum += FrData[i];
 8000330:	4a15      	ldr	r2, [pc, #84]	; (8000388 <Frequency_Calculator+0x80>)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	4413      	add	r3, r2
 800033c:	60bb      	str	r3, [r7, #8]
	for (i=0; i < numVal-1; i++)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3301      	adds	r3, #1
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	2b62      	cmp	r3, #98	; 0x62
 8000348:	dde4      	ble.n	8000314 <Frequency_Calculator+0xc>
	}
	TimeDifference = sum/(numVal-1);
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	4a0f      	ldr	r2, [pc, #60]	; (800038c <Frequency_Calculator+0x84>)
 800034e:	fb82 1203 	smull	r1, r2, r2, r3
 8000352:	441a      	add	r2, r3
 8000354:	1192      	asrs	r2, r2, #6
 8000356:	17db      	asrs	r3, r3, #31
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	607b      	str	r3, [r7, #4]
	InpFrequency = TIM2CLOCK / (float)TimeDifference ;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	ee07 3a90 	vmov	s15, r3
 8000362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000366:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000390 <Frequency_Calculator+0x88>
 800036a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <Frequency_Calculator+0x8c>)
 8000370:	edc3 7a00 	vstr	s15, [r3]
	sum = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	20000318 	.word	0x20000318
 8000388:	20000638 	.word	0x20000638
 800038c:	a57eb503 	.word	0xa57eb503
 8000390:	4caba950 	.word	0x4caba950
 8000394:	20000180 	.word	0x20000180

08000398 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	80fb      	strh	r3, [r7, #6]
	Frequency_Calculator();
 80003a2:	f7ff ffb1 	bl	8000308 <Frequency_Calculator>
	Phase_Shift_Calculator();
 80003a6:	f7ff ff41 	bl	800022c <Phase_Shift_Calculator>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f000 fbd9 	bl	8000b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f828 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f000 f9de 	bl	8000780 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c4:	f000 f9aa 	bl	800071c <MX_DMA_Init>
  MX_TIM1_Init();
 80003c8:	f000 f86e 	bl	80004a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003cc:	f000 f92a 	bl	8000624 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003d0:	2100      	movs	r1, #0
 80003d2:	480b      	ldr	r0, [pc, #44]	; (8000400 <main+0x4c>)
 80003d4:	f001 ffe2 	bl	800239c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003d8:	2104      	movs	r1, #4
 80003da:	4809      	ldr	r0, [pc, #36]	; (8000400 <main+0x4c>)
 80003dc:	f001 ffde 	bl	800239c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, Data1, numVal);
 80003e0:	2364      	movs	r3, #100	; 0x64
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <main+0x50>)
 80003e4:	2100      	movs	r1, #0
 80003e6:	4808      	ldr	r0, [pc, #32]	; (8000408 <main+0x54>)
 80003e8:	f002 f94c 	bl	8002684 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, Data2, numVal);
 80003ec:	2364      	movs	r3, #100	; 0x64
 80003ee:	4a07      	ldr	r2, [pc, #28]	; (800040c <main+0x58>)
 80003f0:	2104      	movs	r1, #4
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <main+0x54>)
 80003f4:	f002 f946 	bl	8002684 <HAL_TIM_IC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(100);
 80003f8:	2064      	movs	r0, #100	; 0x64
 80003fa:	f000 fc29 	bl	8000c50 <HAL_Delay>
 80003fe:	e7fb      	b.n	80003f8 <main+0x44>
 8000400:	20000028 	.word	0x20000028
 8000404:	20000188 	.word	0x20000188
 8000408:	20000074 	.word	0x20000074
 800040c:	20000318 	.word	0x20000318

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b094      	sub	sp, #80	; 0x50
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0318 	add.w	r3, r7, #24
 800041a:	2238      	movs	r2, #56	; 0x38
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f003 ffd6 	bl	80043d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000432:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000436:	f001 f949 	bl	80016cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043a:	2302      	movs	r3, #2
 800043c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000444:	2340      	movs	r3, #64	; 0x40
 8000446:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000448:	2302      	movs	r3, #2
 800044a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800044c:	2302      	movs	r3, #2
 800044e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000450:	2304      	movs	r3, #4
 8000452:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 45;
 8000454:	232d      	movs	r3, #45	; 0x2d
 8000456:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000458:	2302      	movs	r3, #2
 800045a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800045c:	2302      	movs	r3, #2
 800045e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000460:	2302      	movs	r3, #2
 8000462:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4618      	mov	r0, r3
 800046a:	f001 f9e3 	bl	8001834 <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000474:	f000 f9d2 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
 800047a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2303      	movs	r3, #3
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2102      	movs	r1, #2
 8000490:	4618      	mov	r0, r3
 8000492:	f001 fce7 	bl	8001e64 <HAL_RCC_ClockConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800049c:	f000 f9be 	bl	800081c <Error_Handler>
  }
}
 80004a0:	bf00      	nop
 80004a2:	3750      	adds	r7, #80	; 0x50
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09c      	sub	sp, #112	; 0x70
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]
 80004da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2234      	movs	r2, #52	; 0x34
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 ff74 	bl	80043d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e8:	4b4c      	ldr	r3, [pc, #304]	; (800061c <MX_TIM1_Init+0x174>)
 80004ea:	4a4d      	ldr	r2, [pc, #308]	; (8000620 <MX_TIM1_Init+0x178>)
 80004ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 80004ee:	4b4b      	ldr	r3, [pc, #300]	; (800061c <MX_TIM1_Init+0x174>)
 80004f0:	2259      	movs	r2, #89	; 0x59
 80004f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b49      	ldr	r3, [pc, #292]	; (800061c <MX_TIM1_Init+0x174>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80004fa:	4b48      	ldr	r3, [pc, #288]	; (800061c <MX_TIM1_Init+0x174>)
 80004fc:	2263      	movs	r2, #99	; 0x63
 80004fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000500:	4b46      	ldr	r3, [pc, #280]	; (800061c <MX_TIM1_Init+0x174>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000506:	4b45      	ldr	r3, [pc, #276]	; (800061c <MX_TIM1_Init+0x174>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050c:	4b43      	ldr	r3, [pc, #268]	; (800061c <MX_TIM1_Init+0x174>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000512:	4842      	ldr	r0, [pc, #264]	; (800061c <MX_TIM1_Init+0x174>)
 8000514:	f001 fe8a 	bl	800222c <HAL_TIM_Base_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800051e:	f000 f97d 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000526:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000528:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800052c:	4619      	mov	r1, r3
 800052e:	483b      	ldr	r0, [pc, #236]	; (800061c <MX_TIM1_Init+0x174>)
 8000530:	f002 fdaa 	bl	8003088 <HAL_TIM_ConfigClockSource>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800053a:	f000 f96f 	bl	800081c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800053e:	4837      	ldr	r0, [pc, #220]	; (800061c <MX_TIM1_Init+0x174>)
 8000540:	f001 fecb 	bl	80022da <HAL_TIM_PWM_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800054a:	f000 f967 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054e:	2300      	movs	r3, #0
 8000550:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000552:	2300      	movs	r3, #0
 8000554:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800055a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800055e:	4619      	mov	r1, r3
 8000560:	482e      	ldr	r0, [pc, #184]	; (800061c <MX_TIM1_Init+0x174>)
 8000562:	f003 fd83 	bl	800406c <HAL_TIMEx_MasterConfigSynchronization>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800056c:	f000 f956 	bl	800081c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 40;
 8000574:	2328      	movs	r3, #40	; 0x28
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000578:	2300      	movs	r3, #0
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800057c:	2300      	movs	r3, #0
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000584:	2300      	movs	r3, #0
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800058c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	4821      	ldr	r0, [pc, #132]	; (800061c <MX_TIM1_Init+0x174>)
 8000596:	f002 fc63 	bl	8002e60 <HAL_TIM_PWM_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80005a0:	f000 f93c 	bl	800081c <Error_Handler>
  }
  sConfigOC.Pulse = 60;
 80005a4:	233c      	movs	r3, #60	; 0x3c
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ac:	2204      	movs	r2, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	481a      	ldr	r0, [pc, #104]	; (800061c <MX_TIM1_Init+0x174>)
 80005b2:	f002 fc55 	bl	8002e60 <HAL_TIM_PWM_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80005bc:	f000 f92e 	bl	800081c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <MX_TIM1_Init+0x174>)
 80005fe:	f003 fdcb 	bl	8004198 <HAL_TIMEx_ConfigBreakDeadTime>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000608:	f000 f908 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <MX_TIM1_Init+0x174>)
 800060e:	f000 f9eb 	bl	80009e8 <HAL_TIM_MspPostInit>

}
 8000612:	bf00      	nop
 8000614:	3770      	adds	r7, #112	; 0x70
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028
 8000620:	40012c00 	.word	0x40012c00

08000624 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000650:	4b31      	ldr	r3, [pc, #196]	; (8000718 <MX_TIM2_Init+0xf4>)
 8000652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000658:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <MX_TIM2_Init+0xf4>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <MX_TIM2_Init+0xf4>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <MX_TIM2_Init+0xf4>)
 8000666:	f04f 32ff 	mov.w	r2, #4294967295
 800066a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <MX_TIM2_Init+0xf4>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_TIM2_Init+0xf4>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000678:	4827      	ldr	r0, [pc, #156]	; (8000718 <MX_TIM2_Init+0xf4>)
 800067a:	f001 fdd7 	bl	800222c <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000684:	f000 f8ca 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	4619      	mov	r1, r3
 8000694:	4820      	ldr	r0, [pc, #128]	; (8000718 <MX_TIM2_Init+0xf4>)
 8000696:	f002 fcf7 	bl	8003088 <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80006a0:	f000 f8bc 	bl	800081c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80006a4:	481c      	ldr	r0, [pc, #112]	; (8000718 <MX_TIM2_Init+0xf4>)
 80006a6:	f001 ff8b 	bl	80025c0 <HAL_TIM_IC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006b0:	f000 f8b4 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	; (8000718 <MX_TIM2_Init+0xf4>)
 80006c4:	f003 fcd2 	bl	800406c <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80006ce:	f000 f8a5 	bl	800081c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80006d2:	2302      	movs	r3, #2
 80006d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <MX_TIM2_Init+0xf4>)
 80006ea:	f002 fb1c 	bl	8002d26 <HAL_TIM_IC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80006f4:	f000 f892 	bl	800081c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2204      	movs	r2, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_TIM2_Init+0xf4>)
 8000700:	f002 fb11 	bl	8002d26 <HAL_TIM_IC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800070a:	f000 f887 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3730      	adds	r7, #48	; 0x30
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000074 	.word	0x20000074

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_DMA_Init+0x60>)
 8000724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_DMA_Init+0x60>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6493      	str	r3, [r2, #72]	; 0x48
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_DMA_Init+0x60>)
 8000730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_DMA_Init+0x60>)
 800073c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <MX_DMA_Init+0x60>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6493      	str	r3, [r2, #72]	; 0x48
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_DMA_Init+0x60>)
 8000748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200b      	movs	r0, #11
 8000758:	f000 fb77 	bl	8000e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800075c:	200b      	movs	r0, #11
 800075e:	f000 fb8e 	bl	8000e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	200c      	movs	r0, #12
 8000768:	f000 fb6f 	bl	8000e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800076c:	200c      	movs	r0, #12
 800076e:	f000 fb86 	bl	8000e7e <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_GPIO_Init+0x94>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <MX_GPIO_Init+0x94>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_GPIO_Init+0x94>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0x94>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0x94>)
 80007b4:	f043 0320 	orr.w	r3, r3, #32
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_GPIO_Init+0x94>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0320 	and.w	r3, r3, #32
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_GPIO_Init+0x94>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_GPIO_Init+0x94>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_GPIO_Init+0x94>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <MX_GPIO_Init+0x98>)
 80007f6:	f000 fdcf 	bl	8001398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f000 fb23 	bl	8000e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000804:	2028      	movs	r0, #40	; 0x28
 8000806:	f000 fb3a 	bl	8000e7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	48000800 	.word	0x48000800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	; 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	; 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800085e:	f000 ffd9 	bl	8001814 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a50      	ldr	r2, [pc, #320]	; (80009d0 <HAL_TIM_Base_MspInit+0x160>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10c      	bne.n	80008ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000892:	4b50      	ldr	r3, [pc, #320]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	4a4f      	ldr	r2, [pc, #316]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 8000898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089c:	6613      	str	r3, [r2, #96]	; 0x60
 800089e:	4b4d      	ldr	r3, [pc, #308]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008aa:	e08c      	b.n	80009c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b4:	f040 8087 	bne.w	80009c6 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008b8:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	4a45      	ldr	r2, [pc, #276]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6593      	str	r3, [r2, #88]	; 0x58
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a3f      	ldr	r2, [pc, #252]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <HAL_TIM_Base_MspInit+0x164>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e8:	2303      	movs	r3, #3
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008f8:	2301      	movs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fd47 	bl	8001398 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 800090a:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 800090c:	4a33      	ldr	r2, [pc, #204]	; (80009dc <HAL_TIM_Base_MspInit+0x16c>)
 800090e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000910:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 8000912:	2238      	movs	r2, #56	; 0x38
 8000914:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 800092a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 8000932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000936:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000944:	4824      	ldr	r0, [pc, #144]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 8000946:	f000 fab5 	bl	8000eb4 <HAL_DMA_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_TIM_Base_MspInit+0xe4>
      Error_Handler();
 8000950:	f7ff ff64 	bl	800081c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <HAL_TIM_Base_MspInit+0x168>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim2_ch2.Instance = DMA1_Channel2;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 8000962:	4a20      	ldr	r2, [pc, #128]	; (80009e4 <HAL_TIM_Base_MspInit+0x174>)
 8000964:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 8000968:	2239      	movs	r2, #57	; 0x39
 800096a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 8000980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000984:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 8000988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800098c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 800099a:	4811      	ldr	r0, [pc, #68]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 800099c:	f000 fa8a 	bl	8000eb4 <HAL_DMA_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_TIM_Base_MspInit+0x13a>
      Error_Handler();
 80009a6:	f7ff ff39 	bl	800081c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <HAL_TIM_Base_MspInit+0x170>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	201c      	movs	r0, #28
 80009bc:	f000 fa45 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009c0:	201c      	movs	r0, #28
 80009c2:	f000 fa5c 	bl	8000e7e <HAL_NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40021000 	.word	0x40021000
 80009d8:	200000c0 	.word	0x200000c0
 80009dc:	40020008 	.word	0x40020008
 80009e0:	20000120 	.word	0x20000120
 80009e4:	4002001c 	.word	0x4002001c

080009e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <HAL_TIM_MspPostInit+0x68>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d11d      	bne.n	8000a46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_TIM_MspPostInit+0x6c>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <HAL_TIM_MspPostInit+0x6c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_TIM_MspPostInit+0x6c>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a34:	2306      	movs	r3, #6
 8000a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f000 fca9 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40012c00 	.word	0x40012c00
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f8b6 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <DMA1_Channel1_IRQHandler+0x10>)
 8000ab2:	f000 fb22 	bl	80010fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000c0 	.word	0x200000c0

08000ac0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA1_Channel2_IRQHandler+0x10>)
 8000ac6:	f000 fb18 	bl	80010fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000120 	.word	0x20000120

08000ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM2_IRQHandler+0x10>)
 8000ada:	f001 ffa5 	bl	8002a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000074 	.word	0x20000074

08000ae8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000aec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000af0:	f000 fdd4 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b46:	f7ff ffd7 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f003 fc1d 	bl	8004388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4e:	f7ff fc31 	bl	80003b4 <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   r0, =_estack
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b60:	08004410 	.word	0x08004410
  ldr r2, =_sbss
 8000b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b68:	200007c8 	.word	0x200007c8

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>

08000b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f95b 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f80e 	bl	8000ba0 <HAL_InitTick>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	e001      	b.n	8000b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b90:	f7ff fe4a 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b94:	79fb      	ldrb	r3, [r7, #7]

}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_InitTick+0x68>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d022      	beq.n	8000bfa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_InitTick+0x6c>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_InitTick+0x68>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f966 	bl	8000e9a <HAL_SYSTICK_Config>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10f      	bne.n	8000bf4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d809      	bhi.n	8000bee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	f04f 30ff 	mov.w	r0, #4294967295
 8000be2:	f000 f932 	bl	8000e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_InitTick+0x70>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e004      	b.n	8000bfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e001      	b.n	8000bfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c24:	6013      	str	r3, [r2, #0]
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	200007c4 	.word	0x200007c4
 8000c34:	20000008 	.word	0x20000008

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200007c4 	.word	0x200007c4

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff ffee 	bl	8000c38 <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d004      	beq.n	8000c74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_Delay+0x40>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	4413      	add	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c74:	bf00      	nop
 8000c76:	f7ff ffdf 	bl	8000c38 <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d8f7      	bhi.n	8000c76 <HAL_Delay+0x26>
  {
  }
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff40 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff90 	bl	8000d88 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5f 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff33 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffa4 	bl	8000df0 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e08d      	b.n	8000fe2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b47      	ldr	r3, [pc, #284]	; (8000fec <HAL_DMA_Init+0x138>)
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d80f      	bhi.n	8000ef2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <HAL_DMA_Init+0x13c>)
 8000eda:	4413      	add	r3, r2
 8000edc:	4a45      	ldr	r2, [pc, #276]	; (8000ff4 <HAL_DMA_Init+0x140>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	009a      	lsls	r2, r3, #2
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a42      	ldr	r2, [pc, #264]	; (8000ff8 <HAL_DMA_Init+0x144>)
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef0:	e00e      	b.n	8000f10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <HAL_DMA_Init+0x148>)
 8000efa:	4413      	add	r3, r2
 8000efc:	4a3d      	ldr	r2, [pc, #244]	; (8000ff4 <HAL_DMA_Init+0x140>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	009a      	lsls	r2, r3, #2
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a3c      	ldr	r2, [pc, #240]	; (8001000 <HAL_DMA_Init+0x14c>)
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2202      	movs	r2, #2
 8000f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f9b6 	bl	80012d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f70:	d102      	bne.n	8000f78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d010      	beq.n	8000fb8 <HAL_DMA_Init+0x104>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d80c      	bhi.n	8000fb8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f9d6 	bl	8001350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	e008      	b.n	8000fca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020407 	.word	0x40020407
 8000ff0:	bffdfff8 	.word	0xbffdfff8
 8000ff4:	cccccccd 	.word	0xcccccccd
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	bffdfbf8 	.word	0xbffdfbf8
 8001000:	40020400 	.word	0x40020400

08001004 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_DMA_Start_IT+0x20>
 8001020:	2302      	movs	r3, #2
 8001022:	e066      	b.n	80010f2 <HAL_DMA_Start_IT+0xee>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d155      	bne.n	80010e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f000 f8fb 	bl	8001258 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	2b00      	cmp	r3, #0
 8001068:	d008      	beq.n	800107c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 020e 	orr.w	r2, r2, #14
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e00f      	b.n	800109c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0204 	bic.w	r2, r2, #4
 800108a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 020a 	orr.w	r2, r2, #10
 800109a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e005      	b.n	80010f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80010ec:	2302      	movs	r3, #2
 80010ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	2204      	movs	r2, #4
 800111c:	409a      	lsls	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d026      	beq.n	8001174 <HAL_DMA_IRQHandler+0x7a>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d021      	beq.n	8001174 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	2b00      	cmp	r3, #0
 800113c:	d107      	bne.n	800114e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0204 	bic.w	r2, r2, #4
 800114c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f003 021f 	and.w	r2, r3, #31
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2104      	movs	r1, #4
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	2b00      	cmp	r3, #0
 8001168:	d071      	beq.n	800124e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001172:	e06c      	b.n	800124e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	2202      	movs	r2, #2
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d02e      	beq.n	80011e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d029      	beq.n	80011e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 020a 	bic.w	r2, r2, #10
 80011ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	2102      	movs	r1, #2
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d038      	beq.n	800124e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011e4:	e033      	b.n	800124e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	2208      	movs	r2, #8
 80011f0:	409a      	lsls	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d02a      	beq.n	8001250 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d025      	beq.n	8001250 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 020e 	bic.w	r2, r2, #14
 8001212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800124e:	bf00      	nop
 8001250:	bf00      	nop
}
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800126e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001280:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f003 021f 	and.w	r2, r3, #31
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2101      	movs	r1, #1
 8001290:	fa01 f202 	lsl.w	r2, r1, r2
 8001294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d108      	bne.n	80012b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012b6:	e007      	b.n	80012c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	60da      	str	r2, [r3, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d802      	bhi.n	80012ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e001      	b.n	80012f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80012f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3b08      	subs	r3, #8
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	009a      	lsls	r2, r3, #2
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4413      	add	r3, r2
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800131e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2201      	movs	r2, #1
 8001328:	409a      	lsls	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40020407 	.word	0x40020407
 8001340:	40020800 	.word	0x40020800
 8001344:	40020820 	.word	0x40020820
 8001348:	cccccccd 	.word	0xcccccccd
 800134c:	40020880 	.word	0x40020880

08001350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001372:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3b01      	subs	r3, #1
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	2201      	movs	r2, #1
 800137e:	409a      	lsls	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	1000823f 	.word	0x1000823f
 8001394:	40020940 	.word	0x40020940

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013a6:	e15a      	b.n	800165e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 814c 	beq.w	8001658 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80a6 	beq.w	8001658 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b5b      	ldr	r3, [pc, #364]	; (800167c <HAL_GPIO_Init+0x2e4>)
 800150e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001510:	4a5a      	ldr	r2, [pc, #360]	; (800167c <HAL_GPIO_Init+0x2e4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6613      	str	r3, [r2, #96]	; 0x60
 8001518:	4b58      	ldr	r3, [pc, #352]	; (800167c <HAL_GPIO_Init+0x2e4>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001524:	4a56      	ldr	r2, [pc, #344]	; (8001680 <HAL_GPIO_Init+0x2e8>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800154e:	d01f      	beq.n	8001590 <HAL_GPIO_Init+0x1f8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_GPIO_Init+0x2ec>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d019      	beq.n	800158c <HAL_GPIO_Init+0x1f4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4b      	ldr	r2, [pc, #300]	; (8001688 <HAL_GPIO_Init+0x2f0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d013      	beq.n	8001588 <HAL_GPIO_Init+0x1f0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a4a      	ldr	r2, [pc, #296]	; (800168c <HAL_GPIO_Init+0x2f4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00d      	beq.n	8001584 <HAL_GPIO_Init+0x1ec>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a49      	ldr	r2, [pc, #292]	; (8001690 <HAL_GPIO_Init+0x2f8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_Init+0x1e8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a48      	ldr	r2, [pc, #288]	; (8001694 <HAL_GPIO_Init+0x2fc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_GPIO_Init+0x1e4>
 8001578:	2305      	movs	r3, #5
 800157a:	e00a      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 800157c:	2306      	movs	r3, #6
 800157e:	e008      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001580:	2304      	movs	r3, #4
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001584:	2303      	movs	r3, #3
 8001586:	e004      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001588:	2302      	movs	r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001590:	2300      	movs	r3, #0
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	f002 0203 	and.w	r2, r2, #3
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	4093      	lsls	r3, r2
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a2:	4937      	ldr	r1, [pc, #220]	; (8001680 <HAL_GPIO_Init+0x2e8>)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d4:	4a30      	ldr	r2, [pc, #192]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015fe:	4a26      	ldr	r2, [pc, #152]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_GPIO_Init+0x300>)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001652:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	f47f ae9d 	bne.w	80013a8 <HAL_GPIO_Init+0x10>
  }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	48000400 	.word	0x48000400
 8001688:	48000800 	.word	0x48000800
 800168c:	48000c00 	.word	0x48000c00
 8001690:	48001000 	.word	0x48001000
 8001694:	48001400 	.word	0x48001400
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fe6c 	bl	8000398 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d141      	bne.n	800175e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016da:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e6:	d131      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e8:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ee:	4a46      	ldr	r2, [pc, #280]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f8:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001700:	4a41      	ldr	r2, [pc, #260]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001708:	4b40      	ldr	r3, [pc, #256]	; (800180c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2232      	movs	r2, #50	; 0x32
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	4a3f      	ldr	r2, [pc, #252]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	3301      	adds	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800171e:	e002      	b.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3b01      	subs	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001732:	d102      	bne.n	800173a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f2      	bne.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800173a:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001746:	d158      	bne.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e057      	b.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001752:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800175c:	e04d      	b.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001764:	d141      	bne.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001772:	d131      	bne.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800177a:	4a23      	ldr	r2, [pc, #140]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800178c:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001792:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2232      	movs	r2, #50	; 0x32
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	0c9b      	lsrs	r3, r3, #18
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017aa:	e002      	b.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017be:	d102      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f2      	bne.n	80017ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d112      	bne.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e011      	b.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017e8:	e007      	b.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40007000 	.word	0x40007000
 800180c:	20000000 	.word	0x20000000
 8001810:	431bde83 	.word	0x431bde83

08001814 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800181e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001822:	6093      	str	r3, [r2, #8]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40007000 	.word	0x40007000

08001834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e306      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d075      	beq.n	800193e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001852:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185c:	4b94      	ldr	r3, [pc, #592]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d102      	bne.n	8001872 <HAL_RCC_OscConfig+0x3e>
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d002      	beq.n	8001878 <HAL_RCC_OscConfig+0x44>
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b08      	cmp	r3, #8
 8001876:	d10b      	bne.n	8001890 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	4b8d      	ldr	r3, [pc, #564]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d05b      	beq.n	800193c <HAL_RCC_OscConfig+0x108>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d157      	bne.n	800193c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e2e1      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x74>
 800189a:	4b85      	ldr	r3, [pc, #532]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a84      	ldr	r2, [pc, #528]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xb0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x98>
 80018b2:	4b7f      	ldr	r3, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7e      	ldr	r2, [pc, #504]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b7c      	ldr	r3, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7b      	ldr	r2, [pc, #492]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xb0>
 80018cc:	4b78      	ldr	r3, [pc, #480]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a77      	ldr	r2, [pc, #476]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b75      	ldr	r3, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a74      	ldr	r2, [pc, #464]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f9a4 	bl	8000c38 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff f9a0 	bl	8000c38 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e2a6      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xc0>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff f990 	bl	8000c38 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff f98c 	bl	8000c38 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e292      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0xe8>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d075      	beq.n	8001a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194a:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001954:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b0c      	cmp	r3, #12
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0x136>
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d002      	beq.n	8001970 <HAL_RCC_OscConfig+0x13c>
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d11f      	bne.n	80019b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x154>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e265      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	4946      	ldr	r1, [pc, #280]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800199c:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <HAL_RCC_OscConfig+0x280>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff f8fd 	bl	8000ba0 <HAL_InitTick>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d043      	beq.n	8001a34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e251      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d023      	beq.n	8001a00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f938 	bl	8000c38 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff f934 	bl	8000c38 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e23a      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	061b      	lsls	r3, r3, #24
 80019f8:	492d      	ldr	r1, [pc, #180]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
 80019fe:	e01a      	b.n	8001a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f914 	bl	8000c38 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff f910 	bl	8000c38 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e216      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1e0>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d041      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d01c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a50:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f8ed 	bl	8000c38 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff f8e9 	bl	8000c38 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1ef      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0ef      	beq.n	8001a62 <HAL_RCC_OscConfig+0x22e>
 8001a82:	e020      	b.n	8001ac6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff f8d0 	bl	8000c38 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a9a:	e00d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f8cc 	bl	8000c38 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d906      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e1d2      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ea      	bne.n	8001a9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80a6 	beq.w	8001c20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ad8:	4b84      	ldr	r3, [pc, #528]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2b4>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x2b6>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b06:	2301      	movs	r3, #1
 8001b08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0a:	4b79      	ldr	r3, [pc, #484]	; (8001cf0 <HAL_RCC_OscConfig+0x4bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d118      	bne.n	8001b48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b16:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCC_OscConfig+0x4bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a75      	ldr	r2, [pc, #468]	; (8001cf0 <HAL_RCC_OscConfig+0x4bc>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b22:	f7ff f889 	bl	8000c38 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7ff f885 	bl	8000c38 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e18b      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	; (8001cf0 <HAL_RCC_OscConfig+0x4bc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d108      	bne.n	8001b62 <HAL_RCC_OscConfig+0x32e>
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a65      	ldr	r2, [pc, #404]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	e024      	b.n	8001bac <HAL_RCC_OscConfig+0x378>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d110      	bne.n	8001b8c <HAL_RCC_OscConfig+0x358>
 8001b6a:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b70:	4a5e      	ldr	r2, [pc, #376]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	4a5a      	ldr	r2, [pc, #360]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8a:	e00f      	b.n	8001bac <HAL_RCC_OscConfig+0x378>
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	4a56      	ldr	r2, [pc, #344]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d016      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f840 	bl	8000c38 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f83c 	bl	8000c38 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e140      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ed      	beq.n	8001bbc <HAL_RCC_OscConfig+0x388>
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff f829 	bl	8000c38 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f825 	bl	8000c38 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e129      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ed      	bne.n	8001bea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	4a34      	ldr	r2, [pc, #208]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7fe fff8 	bl	8000c38 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4c:	f7fe fff4 	bl	8000c38 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0fa      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ef      	beq.n	8001c4c <HAL_RCC_OscConfig+0x418>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7fe ffdb 	bl	8000c38 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c86:	f7fe ffd7 	bl	8000c38 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0dd      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80d1 	beq.w	8001e52 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	f000 808b 	beq.w	8001dd4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d15e      	bne.n	8001d84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_RCC_OscConfig+0x4b8>)
 8001ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7fe ffb1 	bl	8000c38 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	e00c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe ffad 	bl	8000c38 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d905      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0b3      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ec      	bne.n	8001cda <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d00:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_RCC_OscConfig+0x62c>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6a11      	ldr	r1, [r2, #32]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d10:	3a01      	subs	r2, #1
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	4311      	orrs	r1, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d1a:	0212      	lsls	r2, r2, #8
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d22:	0852      	lsrs	r2, r2, #1
 8001d24:	3a01      	subs	r2, #1
 8001d26:	0552      	lsls	r2, r2, #21
 8001d28:	4311      	orrs	r1, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d2e:	0852      	lsrs	r2, r2, #1
 8001d30:	3a01      	subs	r2, #1
 8001d32:	0652      	lsls	r2, r2, #25
 8001d34:	4311      	orrs	r1, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d3a:	06d2      	lsls	r2, r2, #27
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	4947      	ldr	r1, [pc, #284]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d44:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a44      	ldr	r2, [pc, #272]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a41      	ldr	r2, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7fe ff6c 	bl	8000c38 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7fe ff68 	bl	8000c38 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e06e      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x530>
 8001d82:	e066      	b.n	8001e52 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a34      	ldr	r2, [pc, #208]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d96:	f023 0303 	bic.w	r3, r3, #3
 8001d9a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a2e      	ldr	r2, [pc, #184]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001da2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe ff44 	bl	8000c38 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe ff40 	bl	8000c38 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e046      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x580>
 8001dd2:	e03e      	b.n	8001e52 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e039      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_OscConfig+0x628>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d12c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d123      	bne.n	8001e4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d11b      	bne.n	8001e4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d113      	bne.n	8001e4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	019f800c 	.word	0x019f800c

08001e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e11e      	b.n	80020ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b91      	ldr	r3, [pc, #580]	; (80020c4 <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d910      	bls.n	8001eac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b8e      	ldr	r3, [pc, #568]	; (80020c4 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 020f 	bic.w	r2, r3, #15
 8001e92:	498c      	ldr	r1, [pc, #560]	; (80020c4 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b8a      	ldr	r3, [pc, #552]	; (80020c4 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e106      	b.n	80020ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d073      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d129      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec0:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0f4      	b.n	80020ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ed0:	f000 f966 	bl	80021a0 <RCC_GetSysClockFreqFromPLLSource>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4a7c      	ldr	r2, [pc, #496]	; (80020cc <HAL_RCC_ClockConfig+0x268>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d93f      	bls.n	8001f5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ede:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d033      	beq.n	8001f5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d12f      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001efe:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f06:	4a70      	ldr	r2, [pc, #448]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	e024      	b.n	8001f5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0c6      	b.n	80020ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0be      	b.n	80020ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f3c:	f000 f8ce 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4a61      	ldr	r2, [pc, #388]	; (80020cc <HAL_RCC_ClockConfig+0x268>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d909      	bls.n	8001f5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f52:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b5a      	ldr	r3, [pc, #360]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4957      	ldr	r1, [pc, #348]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f70:	f7fe fe62 	bl	8000c38 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7fe fe5e 	bl	8000c38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e095      	b.n	80020ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d023      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a42      	ldr	r2, [pc, #264]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001fd8:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ffa:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8002000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002004:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_RCC_ClockConfig+0x260>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d21d      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_ClockConfig+0x260>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 020f 	bic.w	r2, r3, #15
 800201c:	4929      	ldr	r1, [pc, #164]	; (80020c4 <HAL_RCC_ClockConfig+0x260>)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002024:	f7fe fe08 	bl	8000c38 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7fe fe04 	bl	8000c38 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e03b      	b.n	80020ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_RCC_ClockConfig+0x260>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d1ed      	bne.n	800202c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4917      	ldr	r1, [pc, #92]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	490f      	ldr	r1, [pc, #60]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208e:	f000 f825 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8002092:	4602      	mov	r2, r0
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_RCC_ClockConfig+0x264>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	490c      	ldr	r1, [pc, #48]	; (80020d0 <HAL_RCC_ClockConfig+0x26c>)
 80020a0:	5ccb      	ldrb	r3, [r1, r3]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x270>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x274>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fd74 	bl	8000ba0 <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	04c4b400 	.word	0x04c4b400
 80020d0:	080043f8 	.word	0x080043f8
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000004 	.word	0x20000004

080020dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020e2:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d102      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020ee:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	e047      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d102      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e03e      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d136      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3301      	adds	r3, #1
 8002128:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d10c      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002130:	4a1a      	ldr	r2, [pc, #104]	; (800219c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	4a16      	ldr	r2, [pc, #88]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800213a:	68d2      	ldr	r2, [r2, #12]
 800213c:	0a12      	lsrs	r2, r2, #8
 800213e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	617b      	str	r3, [r7, #20]
      break;
 8002148:	e00c      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_RCC_GetSysClockFreq+0xbc>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002154:	68d2      	ldr	r2, [r2, #12]
 8002156:	0a12      	lsrs	r2, r2, #8
 8002158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
      break;
 8002162:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	3301      	adds	r3, #1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e001      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002184:	693b      	ldr	r3, [r7, #16]
}
 8002186:	4618      	mov	r0, r3
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	00f42400 	.word	0x00f42400
 800219c:	016e3600 	.word	0x016e3600

080021a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3301      	adds	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d10c      	bne.n	80021de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c4:	4a17      	ldr	r2, [pc, #92]	; (8002224 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ce:	68d2      	ldr	r2, [r2, #12]
 80021d0:	0a12      	lsrs	r2, r2, #8
 80021d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
    break;
 80021dc:	e00c      	b.n	80021f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e8:	68d2      	ldr	r2, [r2, #12]
 80021ea:	0a12      	lsrs	r2, r2, #8
 80021ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    break;
 80021f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0e5b      	lsrs	r3, r3, #25
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	3301      	adds	r3, #1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000
 8002224:	016e3600 	.word	0x016e3600
 8002228:	00f42400 	.word	0x00f42400

0800222c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e049      	b.n	80022d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fb0c 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f001 f940 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e049      	b.n	8002380 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f841 	bl	8002388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f001 f8e9 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_TIM_PWM_Start+0x24>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	e03c      	b.n	800243a <HAL_TIM_PWM_Start+0x9e>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d109      	bne.n	80023da <HAL_TIM_PWM_Start+0x3e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	bf14      	ite	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	2300      	moveq	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	e02f      	b.n	800243a <HAL_TIM_PWM_Start+0x9e>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d109      	bne.n	80023f4 <HAL_TIM_PWM_Start+0x58>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e022      	b.n	800243a <HAL_TIM_PWM_Start+0x9e>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d109      	bne.n	800240e <HAL_TIM_PWM_Start+0x72>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	e015      	b.n	800243a <HAL_TIM_PWM_Start+0x9e>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b10      	cmp	r3, #16
 8002412:	d109      	bne.n	8002428 <HAL_TIM_PWM_Start+0x8c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e008      	b.n	800243a <HAL_TIM_PWM_Start+0x9e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0a6      	b.n	8002590 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_TIM_PWM_Start+0xb6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002450:	e023      	b.n	800249a <HAL_TIM_PWM_Start+0xfe>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d104      	bne.n	8002462 <HAL_TIM_PWM_Start+0xc6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	e01b      	b.n	800249a <HAL_TIM_PWM_Start+0xfe>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d104      	bne.n	8002472 <HAL_TIM_PWM_Start+0xd6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002470:	e013      	b.n	800249a <HAL_TIM_PWM_Start+0xfe>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b0c      	cmp	r3, #12
 8002476:	d104      	bne.n	8002482 <HAL_TIM_PWM_Start+0xe6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002480:	e00b      	b.n	800249a <HAL_TIM_PWM_Start+0xfe>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b10      	cmp	r3, #16
 8002486:	d104      	bne.n	8002492 <HAL_TIM_PWM_Start+0xf6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002490:	e003      	b.n	800249a <HAL_TIM_PWM_Start+0xfe>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	6839      	ldr	r1, [r7, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 fdbc 	bl	8004020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_TIM_PWM_Start+0x1fc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d018      	beq.n	80024e4 <HAL_TIM_PWM_Start+0x148>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a39      	ldr	r2, [pc, #228]	; (800259c <HAL_TIM_PWM_Start+0x200>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_TIM_PWM_Start+0x148>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a37      	ldr	r2, [pc, #220]	; (80025a0 <HAL_TIM_PWM_Start+0x204>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00e      	beq.n	80024e4 <HAL_TIM_PWM_Start+0x148>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a36      	ldr	r2, [pc, #216]	; (80025a4 <HAL_TIM_PWM_Start+0x208>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d009      	beq.n	80024e4 <HAL_TIM_PWM_Start+0x148>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a34      	ldr	r2, [pc, #208]	; (80025a8 <HAL_TIM_PWM_Start+0x20c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_TIM_PWM_Start+0x148>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a33      	ldr	r2, [pc, #204]	; (80025ac <HAL_TIM_PWM_Start+0x210>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_PWM_Start+0x14c>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_TIM_PWM_Start+0x14e>
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a25      	ldr	r2, [pc, #148]	; (8002598 <HAL_TIM_PWM_Start+0x1fc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_TIM_PWM_Start+0x1b2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d01d      	beq.n	800254e <HAL_TIM_PWM_Start+0x1b2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <HAL_TIM_PWM_Start+0x214>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d018      	beq.n	800254e <HAL_TIM_PWM_Start+0x1b2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <HAL_TIM_PWM_Start+0x218>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_TIM_PWM_Start+0x1b2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_TIM_PWM_Start+0x21c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00e      	beq.n	800254e <HAL_TIM_PWM_Start+0x1b2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_TIM_PWM_Start+0x200>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_TIM_PWM_Start+0x1b2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <HAL_TIM_PWM_Start+0x204>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_TIM_PWM_Start+0x1b2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_TIM_PWM_Start+0x210>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d115      	bne.n	800257a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_TIM_PWM_Start+0x220>)
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b06      	cmp	r3, #6
 800255e:	d015      	beq.n	800258c <HAL_TIM_PWM_Start+0x1f0>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002566:	d011      	beq.n	800258c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	e008      	b.n	800258c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e000      	b.n	800258e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40013400 	.word	0x40013400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40014400 	.word	0x40014400
 80025a8:	40014800 	.word	0x40014800
 80025ac:	40015000 	.word	0x40015000
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40000c00 	.word	0x40000c00
 80025bc:	00010007 	.word	0x00010007

080025c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e049      	b.n	8002666 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f841 	bl	800266e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4610      	mov	r0, r2
 8002600:	f000 ff76 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_IC_Start_DMA+0x22>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	e023      	b.n	80026ee <HAL_TIM_IC_Start_DMA+0x6a>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_IC_Start_DMA+0x32>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	e01b      	b.n	80026ee <HAL_TIM_IC_Start_DMA+0x6a>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_IC_Start_DMA+0x42>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e013      	b.n	80026ee <HAL_TIM_IC_Start_DMA+0x6a>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_IC_Start_DMA+0x52>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e00b      	b.n	80026ee <HAL_TIM_IC_Start_DMA+0x6a>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_IC_Start_DMA+0x62>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	e003      	b.n	80026ee <HAL_TIM_IC_Start_DMA+0x6a>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d104      	bne.n	8002700 <HAL_TIM_IC_Start_DMA+0x7c>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e013      	b.n	8002728 <HAL_TIM_IC_Start_DMA+0xa4>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b04      	cmp	r3, #4
 8002704:	d104      	bne.n	8002710 <HAL_TIM_IC_Start_DMA+0x8c>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e00b      	b.n	8002728 <HAL_TIM_IC_Start_DMA+0xa4>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b08      	cmp	r3, #8
 8002714:	d104      	bne.n	8002720 <HAL_TIM_IC_Start_DMA+0x9c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e003      	b.n	8002728 <HAL_TIM_IC_Start_DMA+0xa4>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002726:	b2db      	uxtb	r3, r3
 8002728:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800272a:	7dbb      	ldrb	r3, [r7, #22]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d002      	beq.n	8002736 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8002730:	7d7b      	ldrb	r3, [r7, #21]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d101      	bne.n	800273a <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e15c      	b.n	80029f4 <HAL_TIM_IC_Start_DMA+0x370>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800273a:	7dbb      	ldrb	r3, [r7, #22]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d153      	bne.n	80027e8 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8002740:	7d7b      	ldrb	r3, [r7, #21]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d150      	bne.n	80027e8 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) && (Length > 0U))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_TIM_IC_Start_DMA+0xd2>
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e14e      	b.n	80029f4 <HAL_TIM_IC_Start_DMA+0x370>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <HAL_TIM_IC_Start_DMA+0xe2>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	e023      	b.n	80027ae <HAL_TIM_IC_Start_DMA+0x12a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d104      	bne.n	8002776 <HAL_TIM_IC_Start_DMA+0xf2>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002774:	e01b      	b.n	80027ae <HAL_TIM_IC_Start_DMA+0x12a>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d104      	bne.n	8002786 <HAL_TIM_IC_Start_DMA+0x102>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	e013      	b.n	80027ae <HAL_TIM_IC_Start_DMA+0x12a>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d104      	bne.n	8002796 <HAL_TIM_IC_Start_DMA+0x112>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002794:	e00b      	b.n	80027ae <HAL_TIM_IC_Start_DMA+0x12a>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b10      	cmp	r3, #16
 800279a:	d104      	bne.n	80027a6 <HAL_TIM_IC_Start_DMA+0x122>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027a4:	e003      	b.n	80027ae <HAL_TIM_IC_Start_DMA+0x12a>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <HAL_TIM_IC_Start_DMA+0x13a>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80027bc:	e016      	b.n	80027ec <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_IC_Start_DMA+0x14a>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80027cc:	e00e      	b.n	80027ec <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d104      	bne.n	80027de <HAL_TIM_IC_Start_DMA+0x15a>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 80027dc:	e006      	b.n	80027ec <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 80027e6:	e001      	b.n	80027ec <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e103      	b.n	80029f4 <HAL_TIM_IC_Start_DMA+0x370>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fc13 	bl	8004020 <TIM_CCxChannelCmd>

  switch (Channel)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	f200 80ad 	bhi.w	800295c <HAL_TIM_IC_Start_DMA+0x2d8>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <HAL_TIM_IC_Start_DMA+0x184>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	0800283d 	.word	0x0800283d
 800280c:	0800295d 	.word	0x0800295d
 8002810:	0800295d 	.word	0x0800295d
 8002814:	0800295d 	.word	0x0800295d
 8002818:	08002885 	.word	0x08002885
 800281c:	0800295d 	.word	0x0800295d
 8002820:	0800295d 	.word	0x0800295d
 8002824:	0800295d 	.word	0x0800295d
 8002828:	080028cd 	.word	0x080028cd
 800282c:	0800295d 	.word	0x0800295d
 8002830:	0800295d 	.word	0x0800295d
 8002834:	0800295d 	.word	0x0800295d
 8002838:	08002915 	.word	0x08002915
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_TIM_IC_Start_DMA+0x378>)
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	4a6d      	ldr	r2, [pc, #436]	; (8002a00 <HAL_TIM_IC_Start_DMA+0x37c>)
 800284a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	4a6c      	ldr	r2, [pc, #432]	; (8002a04 <HAL_TIM_IC_Start_DMA+0x380>)
 8002852:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3334      	adds	r3, #52	; 0x34
 800285e:	4619      	mov	r1, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	f7fe fbce 	bl	8001004 <HAL_DMA_Start_IT>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0c0      	b.n	80029f4 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002880:	60da      	str	r2, [r3, #12]
      break;
 8002882:	e06e      	b.n	8002962 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	4a5c      	ldr	r2, [pc, #368]	; (80029fc <HAL_TIM_IC_Start_DMA+0x378>)
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_TIM_IC_Start_DMA+0x37c>)
 8002892:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <HAL_TIM_IC_Start_DMA+0x380>)
 800289a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3338      	adds	r3, #56	; 0x38
 80028a6:	4619      	mov	r1, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_DMA_Start_IT>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e09c      	b.n	80029f4 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028c8:	60da      	str	r2, [r3, #12]
      break;
 80028ca:	e04a      	b.n	8002962 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <HAL_TIM_IC_Start_DMA+0x378>)
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	4a49      	ldr	r2, [pc, #292]	; (8002a00 <HAL_TIM_IC_Start_DMA+0x37c>)
 80028da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	4a48      	ldr	r2, [pc, #288]	; (8002a04 <HAL_TIM_IC_Start_DMA+0x380>)
 80028e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	333c      	adds	r3, #60	; 0x3c
 80028ee:	4619      	mov	r1, r3
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	f7fe fb86 	bl	8001004 <HAL_DMA_Start_IT>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e078      	b.n	80029f4 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002910:	60da      	str	r2, [r3, #12]
      break;
 8002912:	e026      	b.n	8002962 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a38      	ldr	r2, [pc, #224]	; (80029fc <HAL_TIM_IC_Start_DMA+0x378>)
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a37      	ldr	r2, [pc, #220]	; (8002a00 <HAL_TIM_IC_Start_DMA+0x37c>)
 8002922:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a36      	ldr	r2, [pc, #216]	; (8002a04 <HAL_TIM_IC_Start_DMA+0x380>)
 800292a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3340      	adds	r3, #64	; 0x40
 8002936:	4619      	mov	r1, r3
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	f7fe fb62 	bl	8001004 <HAL_DMA_Start_IT>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e054      	b.n	80029f4 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002958:	60da      	str	r2, [r3, #12]
      break;
 800295a:	e002      	b.n	8002962 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
      break;
 8002960:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <HAL_TIM_IC_Start_DMA+0x384>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_TIM_IC_Start_DMA+0x32e>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002974:	d01d      	beq.n	80029b2 <HAL_TIM_IC_Start_DMA+0x32e>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <HAL_TIM_IC_Start_DMA+0x388>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d018      	beq.n	80029b2 <HAL_TIM_IC_Start_DMA+0x32e>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_TIM_IC_Start_DMA+0x38c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_TIM_IC_Start_DMA+0x32e>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <HAL_TIM_IC_Start_DMA+0x390>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_TIM_IC_Start_DMA+0x32e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <HAL_TIM_IC_Start_DMA+0x394>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_TIM_IC_Start_DMA+0x32e>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_TIM_IC_Start_DMA+0x398>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_TIM_IC_Start_DMA+0x32e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_TIM_IC_Start_DMA+0x39c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d115      	bne.n	80029de <HAL_TIM_IC_Start_DMA+0x35a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_TIM_IC_Start_DMA+0x3a0>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d015      	beq.n	80029f0 <HAL_TIM_IC_Start_DMA+0x36c>
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ca:	d011      	beq.n	80029f0 <HAL_TIM_IC_Start_DMA+0x36c>
    {
      __HAL_TIM_ENABLE(htim);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029dc:	e008      	b.n	80029f0 <HAL_TIM_IC_Start_DMA+0x36c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e000      	b.n	80029f2 <HAL_TIM_IC_Start_DMA+0x36e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f0:	bf00      	nop
  }

  /* Return function status */
  return status;
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	080033bf 	.word	0x080033bf
 8002a00:	08003487 	.word	0x08003487
 8002a04:	0800332d 	.word	0x0800332d
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40013400 	.word	0x40013400
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40015000 	.word	0x40015000
 8002a24:	00010007 	.word	0x00010007

08002a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d122      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d11b      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0202 	mvn.w	r2, #2
 8002a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd fbd4 	bl	8000218 <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fc28 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fc39 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d122      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0204 	mvn.w	r2, #4
 8002aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd fbaa 	bl	8000218 <HAL_TIM_IC_CaptureCallback>
 8002ac4:	e005      	b.n	8002ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fbfe 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fc0f 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d122      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d11b      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0208 	mvn.w	r2, #8
 8002afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2204      	movs	r2, #4
 8002b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fb80 	bl	8000218 <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fbd4 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fbe5 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0210 	mvn.w	r2, #16
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2208      	movs	r2, #8
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fd fb56 	bl	8000218 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fbaa 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fbbb 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10e      	bne.n	8002bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0201 	mvn.w	r2, #1
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fb84 	bl	80032b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b80      	cmp	r3, #128	; 0x80
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d107      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f001 fb9c 	bl	8004310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be6:	d10e      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b80      	cmp	r3, #128	; 0x80
 8002bf4:	d107      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f001 fb8f 	bl	8004324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d10e      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d107      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fb69 	bl	8003304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d10e      	bne.n	8002c5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d107      	bne.n	8002c5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f06f 0220 	mvn.w	r2, #32
 8002c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f001 fb4f 	bl	80042fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6c:	d10f      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f001 fb55 	bl	8004338 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9c:	d10f      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 fb47 	bl	800434c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ccc:	d10f      	bne.n	8002cee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cdc:	d107      	bne.n	8002cee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f001 fb39 	bl	8004360 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cfc:	d10f      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0c:	d107      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f001 fb2b 	bl	8004374 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e088      	b.n	8002e56 <HAL_TIM_IC_ConfigChannel+0x130>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11b      	bne.n	8002d8a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f000 ff97 	bl	8003c94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 020c 	bic.w	r2, r2, #12
 8002d74:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6999      	ldr	r1, [r3, #24]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	619a      	str	r2, [r3, #24]
 8002d88:	e060      	b.n	8002e4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d11c      	bne.n	8002dca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f001 f81b 	bl	8003dda <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002db2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	619a      	str	r2, [r3, #24]
 8002dc8:	e040      	b.n	8002e4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d11b      	bne.n	8002e08 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f001 f868 	bl	8003eb4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 020c 	bic.w	r2, r2, #12
 8002df2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69d9      	ldr	r1, [r3, #28]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	61da      	str	r2, [r3, #28]
 8002e06:	e021      	b.n	8002e4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	d11c      	bne.n	8002e48 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f001 f885 	bl	8003f2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e30:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69d9      	ldr	r1, [r3, #28]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	61da      	str	r2, [r3, #28]
 8002e46:	e001      	b.n	8002e4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0ff      	b.n	800307e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b14      	cmp	r3, #20
 8002e8a:	f200 80f0 	bhi.w	800306e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ee9 	.word	0x08002ee9
 8002e98:	0800306f 	.word	0x0800306f
 8002e9c:	0800306f 	.word	0x0800306f
 8002ea0:	0800306f 	.word	0x0800306f
 8002ea4:	08002f29 	.word	0x08002f29
 8002ea8:	0800306f 	.word	0x0800306f
 8002eac:	0800306f 	.word	0x0800306f
 8002eb0:	0800306f 	.word	0x0800306f
 8002eb4:	08002f6b 	.word	0x08002f6b
 8002eb8:	0800306f 	.word	0x0800306f
 8002ebc:	0800306f 	.word	0x0800306f
 8002ec0:	0800306f 	.word	0x0800306f
 8002ec4:	08002fab 	.word	0x08002fab
 8002ec8:	0800306f 	.word	0x0800306f
 8002ecc:	0800306f 	.word	0x0800306f
 8002ed0:	0800306f 	.word	0x0800306f
 8002ed4:	08002fed 	.word	0x08002fed
 8002ed8:	0800306f 	.word	0x0800306f
 8002edc:	0800306f 	.word	0x0800306f
 8002ee0:	0800306f 	.word	0x0800306f
 8002ee4:	0800302d 	.word	0x0800302d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fba6 	bl	8003640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0208 	orr.w	r2, r2, #8
 8002f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0204 	bic.w	r2, r2, #4
 8002f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6999      	ldr	r1, [r3, #24]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	619a      	str	r2, [r3, #24]
      break;
 8002f26:	e0a5      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fc20 	bl	8003774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6999      	ldr	r1, [r3, #24]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	021a      	lsls	r2, r3, #8
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	619a      	str	r2, [r3, #24]
      break;
 8002f68:	e084      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fc93 	bl	800389c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0208 	orr.w	r2, r2, #8
 8002f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0204 	bic.w	r2, r2, #4
 8002f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69d9      	ldr	r1, [r3, #28]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	61da      	str	r2, [r3, #28]
      break;
 8002fa8:	e064      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fd05 	bl	80039c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69d9      	ldr	r1, [r3, #28]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	021a      	lsls	r2, r3, #8
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	61da      	str	r2, [r3, #28]
      break;
 8002fea:	e043      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fd78 	bl	8003ae8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0208 	orr.w	r2, r2, #8
 8003006:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0204 	bic.w	r2, r2, #4
 8003016:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800302a:	e023      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fdc2 	bl	8003bbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003046:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003056:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	021a      	lsls	r2, r3, #8
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800306c:	e002      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
      break;
 8003072:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800307c:	7dfb      	ldrb	r3, [r7, #23]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop

08003088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x1c>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0f6      	b.n	8003292 <HAL_TIM_ConfigClockSource+0x20a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80030c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6f      	ldr	r2, [pc, #444]	; (800329c <HAL_TIM_ConfigClockSource+0x214>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	f000 80c1 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 80030e4:	4a6d      	ldr	r2, [pc, #436]	; (800329c <HAL_TIM_ConfigClockSource+0x214>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	f200 80c6 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 80030ec:	4a6c      	ldr	r2, [pc, #432]	; (80032a0 <HAL_TIM_ConfigClockSource+0x218>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	f000 80b9 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 80030f4:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_TIM_ConfigClockSource+0x218>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	f200 80be 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 80030fc:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <HAL_TIM_ConfigClockSource+0x21c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	f000 80b1 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 8003104:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <HAL_TIM_ConfigClockSource+0x21c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	f200 80b6 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 800310c:	4a66      	ldr	r2, [pc, #408]	; (80032a8 <HAL_TIM_ConfigClockSource+0x220>)
 800310e:	4293      	cmp	r3, r2
 8003110:	f000 80a9 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 8003114:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <HAL_TIM_ConfigClockSource+0x220>)
 8003116:	4293      	cmp	r3, r2
 8003118:	f200 80ae 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 800311c:	4a63      	ldr	r2, [pc, #396]	; (80032ac <HAL_TIM_ConfigClockSource+0x224>)
 800311e:	4293      	cmp	r3, r2
 8003120:	f000 80a1 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 8003124:	4a61      	ldr	r2, [pc, #388]	; (80032ac <HAL_TIM_ConfigClockSource+0x224>)
 8003126:	4293      	cmp	r3, r2
 8003128:	f200 80a6 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 800312c:	4a60      	ldr	r2, [pc, #384]	; (80032b0 <HAL_TIM_ConfigClockSource+0x228>)
 800312e:	4293      	cmp	r3, r2
 8003130:	f000 8099 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 8003134:	4a5e      	ldr	r2, [pc, #376]	; (80032b0 <HAL_TIM_ConfigClockSource+0x228>)
 8003136:	4293      	cmp	r3, r2
 8003138:	f200 809e 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 800313c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003140:	f000 8091 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 8003144:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003148:	f200 8096 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 800314c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003150:	f000 8089 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 8003154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003158:	f200 808e 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 800315c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003160:	d03e      	beq.n	80031e0 <HAL_TIM_ConfigClockSource+0x158>
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003166:	f200 8087 	bhi.w	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 800316a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316e:	f000 8086 	beq.w	800327e <HAL_TIM_ConfigClockSource+0x1f6>
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003176:	d87f      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 8003178:	2b70      	cmp	r3, #112	; 0x70
 800317a:	d01a      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x12a>
 800317c:	2b70      	cmp	r3, #112	; 0x70
 800317e:	d87b      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 8003180:	2b60      	cmp	r3, #96	; 0x60
 8003182:	d050      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x19e>
 8003184:	2b60      	cmp	r3, #96	; 0x60
 8003186:	d877      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 8003188:	2b50      	cmp	r3, #80	; 0x50
 800318a:	d03c      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x17e>
 800318c:	2b50      	cmp	r3, #80	; 0x50
 800318e:	d873      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d058      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x1be>
 8003194:	2b40      	cmp	r3, #64	; 0x40
 8003196:	d86f      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 8003198:	2b30      	cmp	r3, #48	; 0x30
 800319a:	d064      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 800319c:	2b30      	cmp	r3, #48	; 0x30
 800319e:	d86b      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d060      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d867      	bhi.n	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05c      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d05a      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x1de>
 80031b0:	e062      	b.n	8003278 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f000 ff0d 	bl	8003fe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	609a      	str	r2, [r3, #8]
      break;
 80031de:	e04f      	b.n	8003280 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6899      	ldr	r1, [r3, #8]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f000 fef6 	bl	8003fe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003202:	609a      	str	r2, [r3, #8]
      break;
 8003204:	e03c      	b.n	8003280 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	461a      	mov	r2, r3
 8003214:	f000 fdb2 	bl	8003d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2150      	movs	r1, #80	; 0x50
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fec1 	bl	8003fa6 <TIM_ITRx_SetConfig>
      break;
 8003224:	e02c      	b.n	8003280 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	461a      	mov	r2, r3
 8003234:	f000 fe0e 	bl	8003e54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2160      	movs	r1, #96	; 0x60
 800323e:	4618      	mov	r0, r3
 8003240:	f000 feb1 	bl	8003fa6 <TIM_ITRx_SetConfig>
      break;
 8003244:	e01c      	b.n	8003280 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	461a      	mov	r2, r3
 8003254:	f000 fd92 	bl	8003d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2140      	movs	r1, #64	; 0x40
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fea1 	bl	8003fa6 <TIM_ITRx_SetConfig>
      break;
 8003264:	e00c      	b.n	8003280 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f000 fe98 	bl	8003fa6 <TIM_ITRx_SetConfig>
      break;
 8003276:	e003      	b.n	8003280 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      break;
 800327c:	e000      	b.n	8003280 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800327e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	00100070 	.word	0x00100070
 80032a0:	00100060 	.word	0x00100060
 80032a4:	00100050 	.word	0x00100050
 80032a8:	00100040 	.word	0x00100040
 80032ac:	00100030 	.word	0x00100030
 80032b0:	00100020 	.word	0x00100020

080032b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d107      	bne.n	8003354 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003352:	e02a      	b.n	80033aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d107      	bne.n	800336e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2202      	movs	r2, #2
 8003362:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800336c:	e01d      	b.n	80033aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d107      	bne.n	8003388 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2204      	movs	r2, #4
 800337c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003386:	e010      	b.n	80033aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d107      	bne.n	80033a2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2208      	movs	r2, #8
 8003396:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033a0:	e003      	b.n	80033aa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff ffb4 	bl	8003318 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	771a      	strb	r2, [r3, #28]
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10f      	bne.n	80033f6 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d146      	bne.n	8003472 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f4:	e03d      	b.n	8003472 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d10f      	bne.n	8003420 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2202      	movs	r2, #2
 8003404:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d131      	bne.n	8003472 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800341e:	e028      	b.n	8003472 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d10f      	bne.n	800344a <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2204      	movs	r2, #4
 800342e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11c      	bne.n	8003472 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003448:	e013      	b.n	8003472 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d10e      	bne.n	8003472 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2208      	movs	r2, #8
 8003458:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7fc fed0 	bl	8000218 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	771a      	strb	r2, [r3, #28]
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d103      	bne.n	80034a6 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	771a      	strb	r2, [r3, #28]
 80034a4:	e019      	b.n	80034da <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d103      	bne.n	80034b8 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2202      	movs	r2, #2
 80034b4:	771a      	strb	r2, [r3, #28]
 80034b6:	e010      	b.n	80034da <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d103      	bne.n	80034ca <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2204      	movs	r2, #4
 80034c6:	771a      	strb	r2, [r3, #28]
 80034c8:	e007      	b.n	80034da <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d102      	bne.n	80034da <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2208      	movs	r2, #8
 80034d8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff fefe 	bl	80032dc <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	771a      	strb	r2, [r3, #28]
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a46      	ldr	r2, [pc, #280]	; (800361c <TIM_Base_SetConfig+0x12c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d017      	beq.n	8003538 <TIM_Base_SetConfig+0x48>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d013      	beq.n	8003538 <TIM_Base_SetConfig+0x48>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a43      	ldr	r2, [pc, #268]	; (8003620 <TIM_Base_SetConfig+0x130>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00f      	beq.n	8003538 <TIM_Base_SetConfig+0x48>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a42      	ldr	r2, [pc, #264]	; (8003624 <TIM_Base_SetConfig+0x134>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_Base_SetConfig+0x48>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a41      	ldr	r2, [pc, #260]	; (8003628 <TIM_Base_SetConfig+0x138>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_Base_SetConfig+0x48>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a40      	ldr	r2, [pc, #256]	; (800362c <TIM_Base_SetConfig+0x13c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0x48>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3f      	ldr	r2, [pc, #252]	; (8003630 <TIM_Base_SetConfig+0x140>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d108      	bne.n	800354a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a33      	ldr	r2, [pc, #204]	; (800361c <TIM_Base_SetConfig+0x12c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d023      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d01f      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a30      	ldr	r2, [pc, #192]	; (8003620 <TIM_Base_SetConfig+0x130>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01b      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <TIM_Base_SetConfig+0x134>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d017      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <TIM_Base_SetConfig+0x138>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2d      	ldr	r2, [pc, #180]	; (800362c <TIM_Base_SetConfig+0x13c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00f      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2d      	ldr	r2, [pc, #180]	; (8003634 <TIM_Base_SetConfig+0x144>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <TIM_Base_SetConfig+0x148>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2b      	ldr	r2, [pc, #172]	; (800363c <TIM_Base_SetConfig+0x14c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0xaa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <TIM_Base_SetConfig+0x140>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a12      	ldr	r2, [pc, #72]	; (800361c <TIM_Base_SetConfig+0x12c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <TIM_Base_SetConfig+0x110>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a14      	ldr	r2, [pc, #80]	; (800362c <TIM_Base_SetConfig+0x13c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00f      	beq.n	8003600 <TIM_Base_SetConfig+0x110>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a14      	ldr	r2, [pc, #80]	; (8003634 <TIM_Base_SetConfig+0x144>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00b      	beq.n	8003600 <TIM_Base_SetConfig+0x110>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <TIM_Base_SetConfig+0x148>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <TIM_Base_SetConfig+0x110>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a12      	ldr	r2, [pc, #72]	; (800363c <TIM_Base_SetConfig+0x14c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_Base_SetConfig+0x110>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <TIM_Base_SetConfig+0x140>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d103      	bne.n	8003608 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	615a      	str	r2, [r3, #20]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40013400 	.word	0x40013400
 8003630:	40015000 	.word	0x40015000
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800

08003640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0302 	bic.w	r3, r3, #2
 800368c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a30      	ldr	r2, [pc, #192]	; (800375c <TIM_OC1_SetConfig+0x11c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <TIM_OC1_SetConfig+0x88>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <TIM_OC1_SetConfig+0x120>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00f      	beq.n	80036c8 <TIM_OC1_SetConfig+0x88>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a2e      	ldr	r2, [pc, #184]	; (8003764 <TIM_OC1_SetConfig+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00b      	beq.n	80036c8 <TIM_OC1_SetConfig+0x88>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a2d      	ldr	r2, [pc, #180]	; (8003768 <TIM_OC1_SetConfig+0x128>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_OC1_SetConfig+0x88>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a2c      	ldr	r2, [pc, #176]	; (800376c <TIM_OC1_SetConfig+0x12c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_OC1_SetConfig+0x88>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a2b      	ldr	r2, [pc, #172]	; (8003770 <TIM_OC1_SetConfig+0x130>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10c      	bne.n	80036e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0308 	bic.w	r3, r3, #8
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <TIM_OC1_SetConfig+0x11c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <TIM_OC1_SetConfig+0xd2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <TIM_OC1_SetConfig+0x120>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00f      	beq.n	8003712 <TIM_OC1_SetConfig+0xd2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <TIM_OC1_SetConfig+0x124>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00b      	beq.n	8003712 <TIM_OC1_SetConfig+0xd2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <TIM_OC1_SetConfig+0x128>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <TIM_OC1_SetConfig+0xd2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <TIM_OC1_SetConfig+0x12c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_OC1_SetConfig+0xd2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <TIM_OC1_SetConfig+0x130>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d111      	bne.n	8003736 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	621a      	str	r2, [r3, #32]
}
 8003750:	bf00      	nop
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40013400 	.word	0x40013400
 8003764:	40014000 	.word	0x40014000
 8003768:	40014400 	.word	0x40014400
 800376c:	40014800 	.word	0x40014800
 8003770:	40015000 	.word	0x40015000

08003774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0210 	bic.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 0320 	bic.w	r3, r3, #32
 80037c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <TIM_OC2_SetConfig+0x110>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_OC2_SetConfig+0x74>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <TIM_OC2_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_OC2_SetConfig+0x74>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a2a      	ldr	r2, [pc, #168]	; (800388c <TIM_OC2_SetConfig+0x118>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10d      	bne.n	8003804 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <TIM_OC2_SetConfig+0x110>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <TIM_OC2_SetConfig+0xc0>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <TIM_OC2_SetConfig+0x114>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00f      	beq.n	8003834 <TIM_OC2_SetConfig+0xc0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <TIM_OC2_SetConfig+0x11c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00b      	beq.n	8003834 <TIM_OC2_SetConfig+0xc0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <TIM_OC2_SetConfig+0x120>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d007      	beq.n	8003834 <TIM_OC2_SetConfig+0xc0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <TIM_OC2_SetConfig+0x124>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <TIM_OC2_SetConfig+0xc0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <TIM_OC2_SetConfig+0x118>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d113      	bne.n	800385c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800383a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40013400 	.word	0x40013400
 800388c:	40015000 	.word	0x40015000
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <TIM_OC3_SetConfig+0x10c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d007      	beq.n	800390e <TIM_OC3_SetConfig+0x72>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <TIM_OC3_SetConfig+0x110>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_OC3_SetConfig+0x72>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <TIM_OC3_SetConfig+0x114>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10d      	bne.n	800392a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <TIM_OC3_SetConfig+0x10c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <TIM_OC3_SetConfig+0xbe>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <TIM_OC3_SetConfig+0x110>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00f      	beq.n	800395a <TIM_OC3_SetConfig+0xbe>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <TIM_OC3_SetConfig+0x118>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00b      	beq.n	800395a <TIM_OC3_SetConfig+0xbe>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <TIM_OC3_SetConfig+0x11c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <TIM_OC3_SetConfig+0xbe>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <TIM_OC3_SetConfig+0x120>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_OC3_SetConfig+0xbe>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <TIM_OC3_SetConfig+0x114>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d113      	bne.n	8003982 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40013400 	.word	0x40013400
 80039b0:	40015000 	.word	0x40015000
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800

080039c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <TIM_OC4_SetConfig+0x110>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_OC4_SetConfig+0x74>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <TIM_OC4_SetConfig+0x114>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC4_SetConfig+0x74>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a2a      	ldr	r2, [pc, #168]	; (8003ad8 <TIM_OC4_SetConfig+0x118>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10d      	bne.n	8003a50 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <TIM_OC4_SetConfig+0x110>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <TIM_OC4_SetConfig+0xc0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <TIM_OC4_SetConfig+0x114>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <TIM_OC4_SetConfig+0xc0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <TIM_OC4_SetConfig+0x11c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <TIM_OC4_SetConfig+0xc0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <TIM_OC4_SetConfig+0x120>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_OC4_SetConfig+0xc0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <TIM_OC4_SetConfig+0x124>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC4_SetConfig+0xc0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <TIM_OC4_SetConfig+0x118>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d113      	bne.n	8003aa8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	019b      	lsls	r3, r3, #6
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40013400 	.word	0x40013400
 8003ad8:	40015000 	.word	0x40015000
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800

08003ae8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <TIM_OC5_SetConfig+0xbc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <TIM_OC5_SetConfig+0x82>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <TIM_OC5_SetConfig+0xc0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00f      	beq.n	8003b6a <TIM_OC5_SetConfig+0x82>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <TIM_OC5_SetConfig+0xc4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00b      	beq.n	8003b6a <TIM_OC5_SetConfig+0x82>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <TIM_OC5_SetConfig+0xc8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <TIM_OC5_SetConfig+0x82>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <TIM_OC5_SetConfig+0xcc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_OC5_SetConfig+0x82>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <TIM_OC5_SetConfig+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d109      	bne.n	8003b7e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40013400 	.word	0x40013400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	40015000 	.word	0x40015000

08003bbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	051b      	lsls	r3, r3, #20
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <TIM_OC6_SetConfig+0xc0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <TIM_OC6_SetConfig+0x84>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <TIM_OC6_SetConfig+0xc4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00f      	beq.n	8003c40 <TIM_OC6_SetConfig+0x84>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <TIM_OC6_SetConfig+0xc8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_OC6_SetConfig+0x84>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <TIM_OC6_SetConfig+0xcc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_OC6_SetConfig+0x84>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <TIM_OC6_SetConfig+0xd0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC6_SetConfig+0x84>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <TIM_OC6_SetConfig+0xd4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d109      	bne.n	8003c54 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	029b      	lsls	r3, r3, #10
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40013400 	.word	0x40013400
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40014400 	.word	0x40014400
 8003c8c:	40014800 	.word	0x40014800
 8003c90:	40015000 	.word	0x40015000

08003c94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0201 	bic.w	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <TIM_TI1_SetConfig+0xcc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01b      	beq.n	8003cfa <TIM_TI1_SetConfig+0x66>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d017      	beq.n	8003cfa <TIM_TI1_SetConfig+0x66>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <TIM_TI1_SetConfig+0xd0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <TIM_TI1_SetConfig+0x66>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <TIM_TI1_SetConfig+0xd4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_TI1_SetConfig+0x66>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a23      	ldr	r2, [pc, #140]	; (8003d6c <TIM_TI1_SetConfig+0xd8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_TI1_SetConfig+0x66>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <TIM_TI1_SetConfig+0xdc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_TI1_SetConfig+0x66>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <TIM_TI1_SetConfig+0xe0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_TI1_SetConfig+0x66>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <TIM_TI1_SetConfig+0xe4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <TIM_TI1_SetConfig+0x6a>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <TIM_TI1_SetConfig+0x6c>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e003      	b.n	8003d1e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f023 030a 	bic.w	r3, r3, #10
 8003d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f003 030a 	and.w	r3, r3, #10
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40013400 	.word	0x40013400
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40015000 	.word	0x40015000

08003d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0201 	bic.w	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 030a 	bic.w	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f023 0210 	bic.w	r2, r3, #16
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f023 0210 	bic.w	r2, r3, #16
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	031b      	lsls	r3, r3, #12
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 0303 	bic.w	r3, r3, #3
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003f04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	031b      	lsls	r3, r3, #12
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f043 0307 	orr.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	431a      	orrs	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4313      	orrs	r3, r2
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2201      	movs	r2, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004080:	2302      	movs	r3, #2
 8004082:	e074      	b.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a34      	ldr	r2, [pc, #208]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a33      	ldr	r2, [pc, #204]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a31      	ldr	r2, [pc, #196]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d108      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004104:	d01d      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a18      	ldr	r2, [pc, #96]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10c      	bne.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40013400 	.word	0x40013400
 8004184:	40015000 	.word	0x40015000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40014000 	.word	0x40014000

08004198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e096      	b.n	80042e2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d106      	bne.n	800425a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a24      	ldr	r2, [pc, #144]	; (80042f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a22      	ldr	r2, [pc, #136]	; (80042f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d12b      	bne.n	80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	051b      	lsls	r3, r3, #20
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a10      	ldr	r2, [pc, #64]	; (80042f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d106      	bne.n	80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40013400 	.word	0x40013400
 80042f8:	40015000 	.word	0x40015000

080042fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4d0d      	ldr	r5, [pc, #52]	; (80043c0 <__libc_init_array+0x38>)
 800438c:	4c0d      	ldr	r4, [pc, #52]	; (80043c4 <__libc_init_array+0x3c>)
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	2600      	movs	r6, #0
 8004394:	42a6      	cmp	r6, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	4d0b      	ldr	r5, [pc, #44]	; (80043c8 <__libc_init_array+0x40>)
 800439a:	4c0c      	ldr	r4, [pc, #48]	; (80043cc <__libc_init_array+0x44>)
 800439c:	f000 f820 	bl	80043e0 <_init>
 80043a0:	1b64      	subs	r4, r4, r5
 80043a2:	10a4      	asrs	r4, r4, #2
 80043a4:	2600      	movs	r6, #0
 80043a6:	42a6      	cmp	r6, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b0:	4798      	blx	r3
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ba:	4798      	blx	r3
 80043bc:	3601      	adds	r6, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	08004408 	.word	0x08004408
 80043c4:	08004408 	.word	0x08004408
 80043c8:	08004408 	.word	0x08004408
 80043cc:	0800440c 	.word	0x0800440c

080043d0 <memset>:
 80043d0:	4402      	add	r2, r0
 80043d2:	4603      	mov	r3, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d100      	bne.n	80043da <memset+0xa>
 80043d8:	4770      	bx	lr
 80043da:	f803 1b01 	strb.w	r1, [r3], #1
 80043de:	e7f9      	b.n	80043d4 <memset+0x4>

080043e0 <_init>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr

080043ec <_fini>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr
